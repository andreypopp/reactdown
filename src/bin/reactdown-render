#!/usr/bin/env node

import fs from 'fs';
import program from 'commander';
import {renderToString} from '../';
import {parseNamed} from '../ComponentRef';
import pkg from '../../package.json';

function error(message) {
  console.error('error:', message);
  process.exit(1);
}

function collectComponentRef(value, config) {
  let ref = parseNamed(value);
  if (ref === null) {
    error('directive should be in form of: <id>=<source>(:<name>)?');
  }
  config[ref.id] = ref.ref;
  return config;
}

program
  .version(pkg.version)
  .arguments('<file>')
  .option(
    '-d, --directive [component-ref]',
    'Register component for a directive',
    collectComponentRef, {}
  )
  .option(
    '-e, --element [component-ref]',
    'Register component for an element',
    collectComponentRef, {}
  )
  .parse(process.argv);

let filename = program.args[0];

let src = fs.readFileSync(filename, 'utf8');

let config = {
  directives: program.directive,
  elements: program.element,
};

console.log(renderToString(src, config).code);

// vim: set ft=javascript:
